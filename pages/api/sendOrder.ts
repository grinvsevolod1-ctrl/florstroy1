import type { NextApiRequest, NextApiResponse } from 'next';
import nodemailer from 'nodemailer';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') return res.status(405).end();

  const { cart, name, contactMethod, contactValue, email, comment } = req.body;
  const referer = req.headers.referer || '–Ω–µ —É–∫–∞–∑–∞–Ω';

  if (!cart || !Array.isArray(cart) || cart.length === 0) {
    return res.status(400).json({ error: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' });
  }

  const itemsText = cart
    .map((item, idx) => `${idx + 1}. ${item.title} ‚Äî ${item.price} ‚ÇΩ √ó ${item.quantity}`)
    .join('\n');

  const totalPrice = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

  const contactLabels: Record<string, string> = {
    –¢–µ–ª–µ—Ñ–æ–Ω: 'üìû –¢–µ–ª–µ—Ñ–æ–Ω',
    Email: 'üìß Email',
    Telegram: 'üí¨ Telegram',
  };

  const contactLabel = contactLabels[contactMethod] || '–ö–æ–Ω—Ç–∞–∫—Ç';

  const text = `
üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞ florstroy.ru:

üë§ –ò–º—è: ${name}
${contactLabel}: ${contactValue}
üìß Email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}
üåê –ò—Å—Ç–æ—á–Ω–∏–∫: ${referer}

üì¶ –¢–æ–≤–∞—Ä—ã:
${itemsText}

üí∞ –ò—Ç–æ–≥–æ: ${totalPrice} ‚ÇΩ
  `;

  try {
    console.log('–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω:', { name, contactMethod, contactValue, email, comment, cart });

    // Telegram
    await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: process.env.TELEGRAM_CHAT_ID,
        text,
      }),
    });

    // Email
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: Number(process.env.SMTP_PORT),
      secure: true,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    // –ü–∏—Å—å–º–æ —Ç–µ–±–µ
    await transporter.sendMail({
      from: `"Florstroy –ó–∞–∫–∞–∑" <${process.env.SMTP_USER}>`,
      to: 'info@florstroy.ru',
      subject: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞ florstroy.ru',
      text,
      html: `<pre>${text}</pre>`,
    });

    // –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    if (email && email.includes('@')) {
      await transporter.sendMail({
        from: `"Florstroy" <${process.env.SMTP_USER}>`,
        to: email,
        subject: '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç',
        text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!\n\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${totalPrice} ‚ÇΩ.\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
        html: `<p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p><p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É <strong>${totalPrice} ‚ÇΩ</strong>.</p><p>–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p><p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br/>–∫–æ–º–∞–Ω–¥–∞ Florstroy</p>`
      });
    }

    res.status(200).end();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' });
  }
}