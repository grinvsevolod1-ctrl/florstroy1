import type { NextApiRequest, NextApiResponse } from 'next';
import nodemailer from 'nodemailer';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') return res.status(405).end();

  const { name, contactMethod, contactValue, service, message, calculation } = req.body;
  const referer = req.headers.referer || '–Ω–µ —É–∫–∞–∑–∞–Ω';

  const contactLabels: Record<string, string> = {
    –¢–µ–ª–µ—Ñ–æ–Ω: '–¢–µ–ª–µ—Ñ–æ–Ω',
    Email: 'Email',
    Telegram: 'Telegram',
    WhatsApp: 'WhatsApp',
  };

  const contactLabel = contactLabels[contactMethod] || '–ö–æ–Ω—Ç–∞–∫—Ç';

  const text = `
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ florstroy.ru:
–ò–º—è: ${name}
${contactLabel}: ${contactValue}
–£—Å–ª—É–≥–∞ / –æ–±—ä–µ–∫—Ç: ${service}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${message}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${referer}

üìê –†–∞—Å—á—ë—Ç:
${calculation}
  `;

  try {
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { name, contactMethod, contactValue, service, message, calculation });

    // Telegram
    await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: process.env.TELEGRAM_CHAT_ID,
        text,
      }),
    });

    // Email
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: Number(process.env.SMTP_PORT),
      secure: true,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    // –ü–∏—Å—å–º–æ —Ç–µ–±–µ
    await transporter.sendMail({
      from: `"Florstroy –ó–∞—è–≤–∫–∞" <${process.env.SMTP_USER}>`,
      to: 'info@florstroy.ru',
      subject: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ florstroy.ru',
      text,
      html: `<pre>${text}</pre>`,
    });

    // –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ —ç—Ç–æ email)
    if (contactMethod === 'Email' && contactValue.includes('@')) {
      await transporter.sendMail({
        from: `"Florstroy" <${process.env.SMTP_USER}>`,
        to: contactValue,
        subject: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!',
        text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ Florstroy. –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Ä–∞—Å—á—ë—Ç:

${calculation}

–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ Florstroy.`,
        html: `<p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>
<p>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ <strong>Florstroy</strong>. –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Ä–∞—Å—á—ë—Ç:</p>
<pre>${calculation}</pre>
<p>–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
<p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br/>–∫–æ–º–∞–Ω–¥–∞ Florstroy</p>`,
      });
    }

    res.status(200).end();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' });
  }
}
